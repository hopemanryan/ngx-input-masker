{"version":3,"file":"ngx-input-masker.js","sources":["../../../projects/ngx-input-masker/src/lib/input-masker/ngx-input-masker.directive.ts","../../../projects/ngx-input-masker/src/lib/ngx-input-masker.module.ts","../../../projects/ngx-input-masker/src/public-api.ts","../../../projects/ngx-input-masker/src/ngx-input-masker.ts"],"sourcesContent":["import {\r\n    ChangeDetectorRef,\r\n    Directive,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges\r\n} from '@angular/core';\r\n\r\n@Directive({\r\n    // tslint:disable-next-line:directive-selector\r\n    selector: '[NgxInputMasker]'\r\n})\r\nexport class NgxInputMaskerDirective implements OnInit, OnChanges {\r\n    @Input('NgxInputMasker') maskCode = '';\r\n    @Input() customContainerSettings: Partial<CSSStyleDeclaration> = {};\r\n    @Input() customMaskSettings: Partial<CSSStyleDeclaration> = {};\r\n    @Input() containerClass?: string;\r\n    @Input() type = 'password';\r\n    @Output() valueChange: EventEmitter<string> = new EventEmitter<string>();\r\n    container: HTMLDivElement;\r\n\r\n    constructor(private el: ElementRef, private ref: ChangeDetectorRef) {\r\n\r\n    }\r\n\r\n    @HostListener('input', ['$event'])\r\n    onInput(event): void {\r\n        this.updateBox();\r\n        this.valueChange.emit(this.el.nativeElement.value);\r\n\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.buildBox();\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (this.container) {\r\n            this.container.className = this.containerClass;\r\n            if (changes.type.currentValue === 'password') {\r\n                this.el.nativeElement.style.color = 'transparent';\r\n                this.container.style.opacity = '1';\r\n\r\n            } else {\r\n                this.el.nativeElement.style.color = 'black';\r\n                this.container.style.opacity = '0';\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    updateBox(): void {\r\n        this.container.innerHTML = '';\r\n        const split = this.el.nativeElement.value.split('');\r\n        for (const char of split) {\r\n            const maskObject: HTMLSpanElement = document.createElement('span');\r\n            maskObject.innerHTML = this.maskCode;\r\n            // tslint:disable-next-line:forin\r\n            for (const key in this.customMaskSettings) {\r\n                maskObject.style[key] = this.customMaskSettings[key];\r\n            }\r\n            this.container.appendChild(maskObject);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    buildBox(): void {\r\n        this.el.nativeElement.style.color = 'transparent';\r\n        this.container = document.createElement('div');\r\n        this.container.style.width = this.el.nativeElement.offsetWidth + 'px';\r\n        this.container.style.maxWidth = this.el.nativeElement.offsetWidth - 10 + 'px';\r\n        this.container.style.overflow = 'hidden';\r\n        this.container.style.height = this.el.nativeElement.offsetHeight + 'px';\r\n        this.container.style.position = 'fixed';\r\n        this.container.style.top = this.el.nativeElement.offsetTop + 'px';\r\n        this.container.style.left = this.el.nativeElement.offsetLeft + 'px';\r\n        this.container.style.display = 'flex';\r\n        this.container.style.alignItems = 'center';\r\n        this.container.style.paddingLeft = '5px';\r\n\r\n        // tslint:disable-next-line:forin\r\n        for (const key in this.customContainerSettings) {\r\n            this.container.style[key] = this.customContainerSettings[key];\r\n        }\r\n\r\n        this.container.addEventListener('click', () => this.el.nativeElement.focus());\r\n\r\n        document.body.appendChild(this.container);\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxInputMaskerDirective } from './input-masker/ngx-input-masker.directive';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [ NgxInputMaskerDirective],\r\n  imports: [\r\n  ],\r\n  exports: [NgxInputMaskerDirective]\r\n})\r\nexport class NgxInputMaskerModule { }\r\n","/*\r\n * Public API Surface of ngx-input-masker\r\n */\r\n\r\nexport * from './lib/input-masker/ngx-input-masker.directive'\r\nexport * from './lib/ngx-input-masker.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":";;MAiBa,uBAAuB;IAShC,YAAoB,EAAc,EAAU,GAAsB;QAA9C,OAAE,GAAF,EAAE,CAAY;QAAU,QAAG,GAAH,GAAG,CAAmB;QARzC,aAAQ,GAAG,EAAE,CAAC;QAC9B,4BAAuB,GAAiC,EAAE,CAAC;QAC3D,uBAAkB,GAAiC,EAAE,CAAC;QAEtD,SAAI,GAAG,UAAU,CAAC;QACjB,gBAAW,GAAyB,IAAI,YAAY,EAAU,CAAC;KAKxE;IAGD,OAAO,CAAC,KAAK;QACT,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KAEtD;IAED,QAAQ;QACJ,IAAI,CAAC,QAAQ,EAAE,CAAC;KAEnB;IAED,WAAW,CAAC,OAAsB;QAC9B,IAAI,IAAI,CAAC,SAAS,EAAE;YAChB,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC;YAC/C,IAAI,OAAO,CAAC,IAAI,CAAC,YAAY,KAAK,UAAU,EAAE;gBAC1C,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,GAAG,aAAa,CAAC;gBAClD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;aAEtC;iBAAM;gBACH,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;gBAC5C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;aAEtC;SACJ;KAEJ;IAGD,SAAS;QACL,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,EAAE,CAAC;QAC9B,MAAM,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACpD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACtB,MAAM,UAAU,GAAoB,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACnE,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;;YAErC,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACvC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;aACxD;YACD,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;SAC1C;KAEJ;IAGD,QAAQ;QACJ,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,GAAG,aAAa,CAAC;QAClD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC/C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC;QACtE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,WAAW,GAAG,EAAE,GAAG,IAAI,CAAC;QAC9E,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,YAAY,GAAG,IAAI,CAAC;QACxE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC;QAClE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,UAAU,GAAG,IAAI,CAAC;QACpE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;QACtC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,GAAG,QAAQ,CAAC;QAC3C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC;;QAGzC,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,uBAAuB,EAAE;YAC5C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC;SACjE;QAED,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC,CAAC;QAE9E,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;KAC7C;;;YApFJ,SAAS,SAAC;;gBAEP,QAAQ,EAAE,kBAAkB;aAC/B;;;YAbG,UAAU;YAFV,iBAAiB;;;uBAiBhB,KAAK,SAAC,gBAAgB;sCACtB,KAAK;iCACL,KAAK;6BACL,KAAK;mBACL,KAAK;0BACL,MAAM;sBAON,YAAY,SAAC,OAAO,EAAE,CAAC,QAAQ,CAAC;;;MCnBxB,oBAAoB;;;YANhC,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAE,uBAAuB,CAAC;gBACxC,OAAO,EAAE,EACR;gBACD,OAAO,EAAE,CAAC,uBAAuB,CAAC;aACnC;;;ACVD;;;;ACAA;;;;;;"}